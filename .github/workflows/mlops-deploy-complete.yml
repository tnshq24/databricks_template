name: Complete MLOps Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'UnnamedSlug/**'
      - 'tests/**'
      - 'conf/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Manual trigger

env:
  DATABRICKS_HOST: https://adb-1244961191947049.9.azuredatabricks.net

jobs:
  deploy-mlops:
    name: Deploy Complete MLOps Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install databricks-cli databricks-sdk mlflow
        pip install -r unit-requirements-fixed.txt
        pip install -e .

    - name: Configure Databricks CLI
      run: |
        echo "[DEFAULT]" > ~/.databrickscfg
        echo "host = ${{ env.DATABRICKS_HOST }}" >> ~/.databrickscfg
        echo "token = ${{ secrets.DATABRICKS_TOKEN }}" >> ~/.databrickscfg

    - name: Verify Databricks Connection
      run: |
        # Test connection and get workspace info
        databricks workspace list /Shared --output json | head -5
        echo "✅ Databricks CLI configured successfully"

    - name: Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        python -m pytest tests/unit/ -v --tb=short
      continue-on-error: true

    - name: Deploy Model Training Pipeline
      id: deploy_training
      run: |
        echo "🚀 Deploying model training pipeline..."
        
        # Upload code to Databricks workspace
        databricks workspace import-dir ./UnnamedSlug /Workspace/Shared/UnnamedSlug --overwrite
        databricks workspace upload ./conf/test/regression.json /Workspace/Shared/conf/regression.json --overwrite
        
        # Create training job configuration
        cat > training_job.json << EOF
        {
          "name": "MLOps-Training-Job-${{ github.run_number }}",
          "new_cluster": {
            "spark_version": "13.3.x-scala2.12",
            "node_type_id": "Standard_DS3_v2",
            "num_workers": 1,
            "spark_env_vars": {
              "MLFLOW_EXPERIMENT_NAME": "/Shared/mlops-regression-experiment"
            }
          },
          "libraries": [
            {"pypi": {"package": "mlflow>=2.0.0"}}
          ],
          "spark_python_task": {
            "python_file": "/Workspace/Shared/UnnamedSlug/jobs/regression/entrypoint.py",
            "parameters": ["--config", "/Workspace/Shared/conf/regression.json"]
          },
          "timeout_seconds": 3600
        }
        EOF
        
        # Submit and run training job (using Jobs API 2.1 format)
        TRAINING_JOB_ID=$(databricks jobs create --json-file training_job.json | jq -r .job_id)
        echo "training_job_id=$TRAINING_JOB_ID" >> $GITHUB_OUTPUT
        echo "✅ Created training job with ID: $TRAINING_JOB_ID"
        
        # Run the training job
        TRAINING_RUN_ID=$(databricks jobs run-now --job-id $TRAINING_JOB_ID | jq -r .run_id)
        echo "training_run_id=$TRAINING_RUN_ID" >> $GITHUB_OUTPUT
        echo "🏃 Started training run with ID: $TRAINING_RUN_ID"
        
        # Wait for training completion
        timeout=3600
        elapsed=0
        interval=30
        
        while [ $elapsed -lt $timeout ]; do
          STATUS=$(databricks runs get --run-id $TRAINING_RUN_ID | jq -r .state.life_cycle_state)
          echo "⏳ Training status: $STATUS (${elapsed}s elapsed)"
          
          if [ "$STATUS" = "TERMINATED" ]; then
            RESULT=$(databricks runs get --run-id $TRAINING_RUN_ID | jq -r .state.result_state)
            echo "🏁 Training result: $RESULT"
            
            if [ "$RESULT" = "SUCCESS" ]; then
              echo "✅ Training completed successfully!"
              break
            else
              echo "❌ Training failed!"
              databricks runs get --run-id $TRAINING_RUN_ID | jq .state
              exit 1
            fi
          fi
          
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "⏰ Training timed out"
          exit 1
        fi

    - name: Setup Model Serving
      if: success()
      run: |
        echo "🌐 Setting up model serving endpoint..."
        
        # Create serving endpoint configuration
        cat > serving_config.json << EOF
        {
          "name": "regression-model-endpoint",
          "config": {
            "served_models": [
              {
                "name": "regression-model-latest",
                "model_name": "mlops-regression-model",
                "model_version": "latest",
                "workload_size": "Small",
                "scale_to_zero_enabled": true,
                "environment_vars": {
                  "ENABLE_MLFLOW_TRACING": "true"
                }
              }
            ],
            "auto_capture_config": {
              "catalog_name": "main",
              "schema_name": "model_inference_logs",
              "table_name_prefix": "regression_model"
            },
            "traffic_config": {
              "routes": [
                {
                  "served_model_name": "regression-model-latest",
                  "traffic_percentage": 100
                }
              ]
            }
          }
        }
        EOF
        
        # Deploy serving endpoint using Python
        python -c "
        import requests
        import json
        import os
        import time
        
        headers = {
            'Authorization': f'Bearer {os.environ[\"DATABRICKS_TOKEN\"]}',
            'Content-Type': 'application/json'
        }
        
        base_url = '${{ env.DATABRICKS_HOST }}'
        endpoint_name = 'regression-model-endpoint'
        
        with open('serving_config.json', 'r') as f:
            config = json.load(f)
        
        # Check if endpoint exists
        response = requests.get(f'{base_url}/api/2.0/serving-endpoints/{endpoint_name}', headers=headers)
        
        if response.status_code == 404:
            print('🚀 Creating new serving endpoint...')
            response = requests.post(f'{base_url}/api/2.0/serving-endpoints', headers=headers, json=config)
        else:
            print('🔄 Updating existing serving endpoint...')
            response = requests.put(f'{base_url}/api/2.0/serving-endpoints/{endpoint_name}/config', 
                                  headers=headers, json=config['config'])
        
        if response.status_code not in [200, 201]:
            print(f'❌ Serving endpoint error: {response.text}')
            exit(1)
        
        print('✅ Serving endpoint configured!')
        "
      env:
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

    - name: Create Auto-Retraining Job
      if: success()
      run: |
        echo "🔄 Creating auto-retraining job..."
        
        # Upload auto-retraining code
        databricks workspace upload ./UnnamedSlug/jobs/auto_retrain/data_monitor.py /Workspace/Shared/UnnamedSlug/jobs/auto_retrain/data_monitor.py --overwrite
        
        # Create auto-retraining job
        cat > auto_retrain_job.json << EOF
        {
          "name": "Auto-Retraining-Monitor",
          "new_cluster": {
            "spark_version": "13.3.x-scala2.12",
            "node_type_id": "Standard_DS3_v2",
            "num_workers": 1,
            "spark_env_vars": {
              "MLFLOW_EXPERIMENT_NAME": "/Shared/mlops-regression-experiment"
            }
          },
          "libraries": [
            {"pypi": {"package": "mlflow>=2.0.0"}}
          ],
          "spark_python_task": {
            "python_file": "/Workspace/Shared/UnnamedSlug/jobs/auto_retrain/data_monitor.py"
          },
          "schedule": {
            "quartz_cron_expression": "0 0 2 * * ?",
            "timezone_id": "UTC"
          },
          "timeout_seconds": 3600,
          "max_concurrent_runs": 1
        }
        EOF
        
        # Create the auto-retraining job (using Jobs API 2.1 format)
        AUTO_RETRAIN_JOB_ID=$(databricks jobs create --json-file auto_retrain_job.json | jq -r .job_id)
        echo "✅ Created auto-retraining job with ID: $AUTO_RETRAIN_JOB_ID"
        
        # Save job ID for future reference
        echo "auto_retrain_job_id=$AUTO_RETRAIN_JOB_ID" >> $GITHUB_OUTPUT

    - name: Deployment Summary
      if: always()
      run: |
        echo "🎉 MLOps Deployment Summary"
        echo "=========================="
        echo ""
        echo "📊 Status:"
        echo "  - Unit Tests: ${{ steps.deploy_training.outcome && 'Completed' || 'Failed' }}"
        echo "  - Model Training: ${{ steps.deploy_training.outcome }}"
        echo "  - Model Serving: Configured"
        echo "  - Auto-Retraining: Setup Complete"
        echo ""
        echo "🌐 Endpoints:"
        echo "  - Serving: ${{ env.DATABRICKS_HOST }}/serving-endpoints/regression-model-endpoint/invocations"
        echo "  - MLflow: ${{ env.DATABRICKS_HOST }}/#mlflow/experiments"
        echo "  - Jobs: ${{ env.DATABRICKS_HOST }}/#job/list"
        echo ""
        echo "🚀 Your MLOps pipeline is deployed and ready!" 